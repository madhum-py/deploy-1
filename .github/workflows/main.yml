name: Deploy Django on Remote VM

on:
  workflow_dispatch:  # Allows manual trigger
  push:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install SSH Client & SSHPass
        run: sudo apt-get install -y openssh-client sshpass

      - name: Connect to VM & Check for Reboot
        run: |
          echo "🚀 Checking if VM was rebooted..."
          sshpass -p "${{ secrets.VM_PASSWORD }}" ssh -o PreferredAuthentications=password -o PubkeyAuthentication=no -o StrictHostKeyChecking=no "${{ secrets.VM_USERNAME }}"@"${{ secrets.VM_IP }}" << 'EOF'
            if [ -f /tmp/reboot-required-action ]; then
                echo "🔄 System was rebooted. Removing flag and continuing deployment..."
                sudo rm -f /tmp/reboot-required-action
                exit 0
            fi
            echo "✅ No reboot detected. Proceeding with system update..."
          EOF

      - name: Perform System Update & Reboot if Required
        id: update_system
        run: |
          echo "🚀 Updating system..."
          sshpass -p "${{ secrets.VM_PASSWORD }}" ssh -o PreferredAuthentications=password -o PubkeyAuthentication=no -o StrictHostKeyChecking=no ${{ secrets.VM_USERNAME }}@${{ secrets.VM_IP }} << 'EOF'
            export DEBIAN_FRONTEND=noninteractive
            sudo apt update -y && sudo apt upgrade -y
            sudo apt dist-upgrade -y

            if [ -f /var/run/reboot-required ]; then
                echo "⚠️ Kernel update detected! Marking reboot-required flag..."
                sudo touch /tmp/reboot-required-action
                sudo reboot
                exit 0
            fi
          EOF
        continue-on-error: true  # Prevents GitHub from marking the job as failed on reboot

      - name: Auto-Retry If Reboot Occurs
        if: failure() && steps.update_system.outcome == 'failure'
        run: |
          echo "⚠️ First run failed due to reboot. GitHub Actions will auto-retry this job."
          exit 1  # Forces GitHub Actions to retry the workflow

      - name: Connect to VM & Install Django
        run: |
          echo "🚀 Connecting to Remote VM for Django Installation..."
          sshpass -p "${{ secrets.VM_PASSWORD }}" ssh -o PreferredAuthentications=password -o PubkeyAuthentication=no -o StrictHostKeyChecking=no ${{ secrets.VM_USERNAME }}@${{ secrets.VM_IP }} << 'EOF'
            echo "🚀 Installing required packages..."
            sudo apt install -y python3 python3-pip

            echo "🚀 Installing Django..."
            sudo -H pip3 install --upgrade pip
            sudo -H pip3 install django
          EOF

      - name: Install & Configure PostgreSQL
        run: |
            echo "🚀 Installing PostgreSQL..."
            sshpass -p "${{ secrets.VM_PASSWORD }}" ssh -o PreferredAuthentications=password -o PubkeyAuthentication=no -o StrictHostKeyChecking=no ${{ secrets.VM_USERNAME }}@${{ secrets.VM_IP }} << 'EOF'
              sudo apt update -y
              sudo apt install -y postgresql postgresql-contrib libpq-dev
  
              echo "🚀 Starting PostgreSQL service..."
              sudo systemctl enable postgresql
              sudo systemctl start postgresql
  
              echo "🚀 Configuring PostgreSQL User and Database..."
              sudo -u postgres psql <<EOF
              CREATE DATABASE registration_db;
              CREATE USER postgresql WITH PASSWORD 'postgresql123';
              ALTER ROLE postgresql SET client_encoding TO 'utf8';
              ALTER ROLE postgresql SET default_transaction_isolation TO 'read committed';
              ALTER ROLE postgresql SET timezone TO 'UTC';
              GRANT ALL PRIVILEGES ON DATABASE registration_db TO postgresql;
              EOF
  
              echo "🚀 Configuring PostgreSQL to accept remote connections..."
              sudo sed -i "s/#listen_addresses = 'localhost'/listen_addresses = '*'/" /etc/postgresql/*/main/postgresql.conf
  
              echo "host all all 0.0.0.0/0 md5" | sudo tee -a /etc/postgresql/*/main/pg_hba.conf
  
              echo "🚀 Restarting PostgreSQL to apply changes..."
              sudo systemctl restart postgresql
            EOF
